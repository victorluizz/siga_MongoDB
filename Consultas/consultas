
use("SigaDB");

// RENAMECOLLECTION
db.curso.renameCollection("cursos");

// $WHERE, FUNCTION, PRETTY: Procura o professor com o CPF específicado.
db.professores.find({$where: function() {
    return (this.cpf == "50544000447")
}
}).pretty();


// FIND SORT, PRETTY: Exibindo os dados de todos os professores em ordem decrescente
db.professores.find().sort({nome: -1}).pretty();

//FIND, COUNT: Quantidade de disciplinas que o professor Adriano ensina
db.disciplinas.find({"professor_ensina.nome": "Adriano Sarmento"}).count();


//AGGREGATE, GTE, MATCH, GROUP, MAX, SORT: Disciplinas e Professores que ensinam disciplinas com creditos > 4
db.disciplinas.aggregate([
  {$match:{creditos: {$gte:4}}},
  {$group:{_id:'$nome', professores: {$max: '$professor_ensina.nome'}}},
  {$sort:{'_id': 1}}
]);

//FIND, TEXT, SEARCH: Disciplinas introdutórias
db.disciplinas.createIndex({nome: 'text'});
db.disciplinas.find({$text: {$search: '1'}}, {_id : 0, nome: 1, descricao: 1});

//SIZE: Procurando qual disciplina tem 3 professores ensinando.

db.disciplinas.find({professor_ensina: {$size: 3}}, {nome: 1, _id: 0})

//PROJECT: Procurando o nome e o salário dos professores, excluindo o id.

db.professores.aggregate( [ { $project : { nome : 1 , salario : 1 , _id: 0} } ] )


//SUM, GROUP, AGGREGATE:   Agrega os valores dos centros e conta o número de ocorrências de cada um deles
db.getCollection('cursos').aggregate([
  {
    "$group": {
      _id: "$centro",
      count: {
        $sum: 1
      }
    }
  }
])


//GROUP, AVG: Buscando qual a média de salário dos professores de todas as disciplinas.

db.disciplinas.aggregate([
  {$unwind: '$professor_ensina'},
  {$group: {_id:'$nome', media_salarial: {$avg: '$professor_ensina.salario'}}}
])

//EXISTS: Buscando qual disciplina não possui nenhum professor.
db.disciplinas.find({professor_ensina: {$exists: false}}).count()

//LIMIT, SORT: Buscando os 3 professores com maior salário, e colocando em ordem com base nos valores.
db.professores.find( ).sort({"salario":-1}).limit(3)

//$ALL: Exibindo os cursos que são ofertados nos Campus Recife e Agreste.
db.cursos.find({campus: {$all: ["Campus Recife", "Campus Agreste"]}}, {nome_curso: 1})

//UPDATE, $SET: Atualizando o número de telefone de um professor.
db.professores.updateOne({"nome": "Victor Luiz"}, {$set: {"telefone": "(81) 3851-8410"}})

//PROJECT, FILTER, COND: Buscando os professores que tem o salário maior ou igual a 5000.
db.disciplinas.aggregate( [
   {
      $project: {
        nome: 1, _id: 0,
         professor_ensina: {
            $filter: {
               input: "$professor_ensina",
               as: "professor",
               cond: { $gte: [ "$$professor.salario", 5.000 ] }
            }
         }
      }
   }
] )

//ADDTOSET, FINDONE: Atualizar a disciplina de estatística adicionar mais um professor
db.getCollection('disciplinas').updateOne(
    { codigo: 127 },
    { $addToSet: { professor_ensina: db.getCollection('professores').findOne({codigo_professor: 1}) } }
);
db.getCollection('disciplinas').find({ codigo: 127 }).pretty();

//LOOKUP: Exibindo os campus em comum da coleção de "professores" e "cursos"
db.professores.aggregate( [
   {
      $lookup:
         {
            from: "cursos",
            localField: "campus_leciona",
            foreignField: "campus",
            as: "campus_array"
        }

   }
] )

//MAPREDUCE, FUNCTION: exibe nome da disciplina como chave e qtde de creditos totais como valor
var mapFun = function(){
  emit(this.nome, this.creditos)
};
var reduceFun = function(nome, valor){
  const qtde_cred = valor.reduce((a, b) => a + b, 0);
  return (nome, qtde_cred)
};
db.disciplinas.mapReduce(
  mapFun,
  reduceFun,
  {
    out: 'map_reduce_saida'
  }
);
db.map_reduce_saida.find();
